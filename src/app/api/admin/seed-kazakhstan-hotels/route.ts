import { NextRequest, NextResponse } from 'next/server';
import Database from 'better-sqlite3';
import path from 'path';
import { kazakhstanHotelsData, generateAdditionalKazakhstanHotels } from '@/lib/kazakhstanHotels';
import { initializeDatabase } from '@/lib/database';

export async function POST(request: NextRequest) {
  try {
    console.log('üá∞üáø –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –æ—Ç–µ–ª–µ–π...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const dbPath = path.join(process.cwd(), 'hotels.db');
    const db = new Database(dbPath);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await initializeDatabase();

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–µ–ª–∏
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–µ–ª–µ–π...');
    db.prepare('DELETE FROM hotels WHERE city IN (?, ?, ?, ?, ?, ?, ?, ?)').run(
      '–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–®—ã–º–∫–µ–Ω—Ç', '–ê–∫—Ç–æ–±–µ', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', '–¢–∞—Ä–∞–∑', '–ü–∞–≤–ª–æ–¥–∞—Ä', '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫'
    );

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const insertHotel = db.prepare(`
      INSERT INTO hotels (
        name, category, city, address, price_per_night, 
        rating, image_url, description, amenities
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ –æ—Ç–µ–ª–∏
    console.log('üè® –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–µ–ª–∏...');
    let hotelCount = 0;

    for (const hotel of kazakhstanHotelsData) {
      try {
        insertHotel.run(
          hotel.name,
          hotel.category,
          hotel.city,
          hotel.address,
          hotel.price_per_night,
          hotel.rating,
          hotel.image_url,
          hotel.description,
          hotel.amenities
        );
        hotelCount++;
      } catch (error) {
        console.warn(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ—Ç–µ–ª—å: ${hotel.name}`);
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–µ–ª–∏
    console.log('üè® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–µ–ª–∏...');
    const additionalHotels = generateAdditionalKazakhstanHotels();
    
    for (const hotel of additionalHotels) {
      try {
        insertHotel.run(
          hotel.name,
          hotel.category,
          hotel.city,
          hotel.address,
          hotel.price_per_night,
          hotel.rating,
          hotel.image_url,
          hotel.description,
          hotel.amenities
        );
        hotelCount++;
      } catch (error) {
        console.warn(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ—Ç–µ–ª—å: ${hotel.name}`);
      }
    }

    db.close();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:');
    console.log(`  üèõÔ∏è –ê—Å—Ç–∞–Ω–∞: –æ—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    console.log(`  üèîÔ∏è –ê–ª–º–∞—Ç—ã: –æ—Ç–µ–ª–∏ —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä—ã`);
    console.log(`  üåÜ –®—ã–º–∫–µ–Ω—Ç: —é–∂–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞`);
    console.log(`  üè¢ –ê–∫—Ç–æ–±–µ: –¥–µ–ª–æ–≤—ã–µ –æ—Ç–µ–ª–∏`);
    console.log(`  ‚õèÔ∏è –ö–∞—Ä–∞–≥–∞–Ω–¥–∞: –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä`);
    console.log(`  üèõÔ∏è –¢–∞—Ä–∞–∑: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥`);
    console.log(`  üå≤ –ü–∞–≤–ª–æ–¥–∞—Ä: –æ—Ç–µ–ª–∏ —É –ø—Ä–∏—Ä–æ–¥—ã`);
    console.log(`  üèîÔ∏è –£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫: –≥–æ—Ä–Ω—ã–µ –æ—Ç–µ–ª–∏`);
    console.log(`\n‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–µ–ª–µ–π: ${hotelCount}`);

    return NextResponse.json({ 
      success: true, 
      message: `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${hotelCount} –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –æ—Ç–µ–ª–µ–π`,
      hotels_loaded: hotelCount,
      cities: ['–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–®—ã–º–∫–µ–Ω—Ç', '–ê–∫—Ç–æ–±–µ', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', '–¢–∞—Ä–∞–∑', '–ü–∞–≤–ª–æ–¥–∞—Ä', '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫']
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –æ—Ç–µ–ª–µ–π:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–µ–ª–µ–π' },
      { status: 500 }
    );
  }
} 