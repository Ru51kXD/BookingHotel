'use client';

import { useState, useEffect, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { motion } from '@/lib/motion';
import { Search, Filter, Grid, List, ArrowLeft, MapPin, Star, Map } from 'lucide-react';
import HotelCard from '@/components/HotelCard';
import HotelMap from '@/components/HotelMap';
import { getCategoryPlaceholder, createImageErrorHandler } from '@/lib/imageUtils';
import { Hotel } from '@/lib/database';
import { useCurrency, CurrencyUtils } from '@/lib/currency';

interface Category {
  value: string;
  label: string;
  description: string;
  icon: string;
}

export default function HotelsPage() {
  const searchParams = useSearchParams();
  
  const { formatPrice } = useCurrency();
  
  const [hotels, setHotels] = useState<Hotel[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [viewMode, setViewMode] = useState<'grid' | 'list' | 'map'>('grid');
  const [showFilters, setShowFilters] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filters, setFilters] = useState({
    search: searchParams.get('q') || '',
    category: searchParams.get('category') || '',
    city: searchParams.get('city') || '',
    minPrice: '',
    maxPrice: '',
    minRating: ''
  });

  useEffect(() => {
    fetchCategories();
    fetchHotels();
  }, []);

  useEffect(() => {
    fetchHotels();
  }, [filters]);

  const fetchCategories = async () => {
    try {
      const response = await fetch('/api/hotels/categories');
      const data = await response.json();
      if (data.success) {
        setCategories(data.data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    }
  };

  const fetchHotels = async () => {
    try {
      setLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–µ–ª–∏ –∏–∑ localStorage (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É)
      const storedHotels = localStorage.getItem('admin_hotels');
      let hotelsFromStorage: Hotel[] = [];
      
      if (storedHotels) {
        hotelsFromStorage = JSON.parse(storedHotels).map((hotel: any) => ({
          ...hotel,
          id: hotel.id.toString(), // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          latitude: hotel.latitude || 0,
          longitude: hotel.longitude || 0
        }));
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–µ–ª–∏ –∏–∑ API
      let apiHotels: Hotel[] = [];
      try {
        const params = new URLSearchParams();
        
        if (filters.search) params.append('q', filters.search);
        if (filters.category) params.append('category', filters.category);
        if (filters.city) params.append('city', filters.city);

        const response = await fetch(`/api/hotels?${params.toString()}`);
        const data = await response.json();
        
        if (data.success) {
          apiHotels = data.data;
        }
      } catch (apiError) {
        console.log('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ localStorage');
      }
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–µ–ª–∏ –∏–∑ localStorage –∏ API
      const allHotels = [...hotelsFromStorage, ...apiHotels];
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ id (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É localStorage)
      const uniqueHotels = allHotels.filter((hotel, index, self) => 
        index === self.findIndex((h) => h.id.toString() === hotel.id.toString())
      );
      
      let filteredHotels = uniqueHotels;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.search) {
        filteredHotels = filteredHotels.filter((hotel: Hotel) => 
          hotel.name.toLowerCase().includes(filters.search.toLowerCase()) ||
          hotel.city.toLowerCase().includes(filters.search.toLowerCase()) ||
          hotel.address.toLowerCase().includes(filters.search.toLowerCase())
        );
      }
      
      if (filters.category) {
        filteredHotels = filteredHotels.filter((hotel: Hotel) => 
          hotel.category === filters.category
        );
      }
      
      if (filters.city) {
        filteredHotels = filteredHotels.filter((hotel: Hotel) => 
          hotel.city.toLowerCase().includes(filters.city.toLowerCase())
        );
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –∏ —Ä–µ–π—Ç–∏–Ω–≥—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      if (filters.minPrice) {
        filteredHotels = filteredHotels.filter((hotel: Hotel) => 
          hotel.price_per_night >= parseInt(filters.minPrice)
        );
      }
      
      if (filters.maxPrice) {
        filteredHotels = filteredHotels.filter((hotel: Hotel) => 
          hotel.price_per_night <= parseInt(filters.maxPrice)
        );
      }
      
      if (filters.minRating) {
        filteredHotels = filteredHotels.filter((hotel: Hotel) => 
          hotel.rating >= parseFloat(filters.minRating)
        );
      }

      setHotels(filteredHotels);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–µ–ª–µ–π:', error);
    } finally {
      setLoading(false);
    }
  };

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`w-4 h-4 ${
          i < Math.floor(rating) 
            ? 'text-yellow-400 fill-current' 
            : 'text-gray-300'
        }`}
      />
    ));
  };

  const getCategoryLabel = (category: string) => {
    const categoryItem = categories.find(c => c.value === category);
    return categoryItem ? categoryItem.label : category;
  };

  const resetFilters = () => {
    setFilters({
      search: '',
      category: '',
      city: '',
      minPrice: '',
      maxPrice: '',
      minRating: ''
    });
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
        ease: [0.25, 0.46, 0.45, 0.94],
      },
    },
  };

  const handleHotelSelect = (hotel: Hotel) => {
    window.location.href = `/hotel/${hotel.id}`;
  };

  return (
    <>
      <div className="min-h-screen bg-gray-50 pt-24">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bg-white shadow-sm border-b">
          <div className="container mx-auto px-4 py-8">
            <div className="flex items-center justify-between">
              <div>
                <Link href="/" className="inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors mb-4">
                  <ArrowLeft className="w-5 h-5 mr-2" />
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                </Link>
                <h1 className="text-3xl font-bold text-gray-900">–ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–µ–ª–µ–π</h1>
                <p className="text-gray-600 mt-2">
                  –ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π: {hotels.length}
                </p>
              </div>
              
              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞ */}
              <div className="flex items-center space-x-4">
                {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –∫–∞—Ä—Ç–µ */}
                {viewMode === 'map' && (
                  <div className="hidden lg:block bg-blue-50 text-blue-700 px-3 py-1 rounded-lg text-sm">
                    üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã –≥–æ—Ä–æ–¥–æ–≤, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–µ–ª–∏
                  </div>
                )}
                
                <div className="flex items-center space-x-2 bg-gray-100 rounded-lg p-1">
                  <button
                    onClick={() => setViewMode('grid')}
                    className={`p-2 rounded-md transition-colors ${
                      viewMode === 'grid' 
                        ? 'bg-white text-blue-600 shadow-sm' 
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                    title="–í–∏–¥ —Å–µ—Ç–∫–∏"
                  >
                    <Grid className="w-5 h-5" />
                  </button>
                  <button
                    onClick={() => setViewMode('list')}
                    className={`p-2 rounded-md transition-colors ${
                      viewMode === 'list' 
                        ? 'bg-white text-blue-600 shadow-sm' 
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                    title="–í–∏–¥ —Å–ø–∏—Å–∫–∞"
                  >
                    <List className="w-5 h-5" />
                  </button>
                  <button
                    onClick={() => setViewMode('map')}
                    className={`p-2 rounded-md transition-colors ${
                      viewMode === 'map' 
                        ? 'bg-white text-blue-600 shadow-sm' 
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                    title="–í–∏–¥ –∫–∞—Ä—Ç—ã"
                  >
                    <Map className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-4 py-8">
          {viewMode === 'map' ? (
            // –í–∏–¥ –∫–∞—Ä—Ç—ã - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π
            <div className="h-[calc(100vh-200px)]">
              {loading ? (
                <div className="flex items-center justify-center h-full">
                  <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
                  </div>
                </div>
              ) : (
                <HotelMap 
                  hotels={hotels} 
                  onHotelSelect={handleHotelSelect}
                />
              )}
            </div>
          ) : (
            // –û–±—ã—á–Ω—ã–π –≤–∏–¥ —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
            <div className="flex flex-col lg:flex-row gap-8">
              {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ */}
              <div className="lg:w-1/4">
                <div className="bg-white rounded-2xl shadow-lg p-6 sticky top-24">
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-xl font-bold text-gray-900">–§–∏–ª—å—Ç—Ä—ã</h2>
                    <button
                      onClick={resetFilters}
                      className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                    >
                      –°–±—Ä–æ—Å–∏—Ç—å
                    </button>
                  </div>

                  <div className="space-y-6">
                    {/* –ü–æ–∏—Å–∫ */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –ü–æ–∏—Å–∫
                      </label>
                      <input
                        type="text"
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è..."
                        value={filters.search}
                        onChange={(e) => setFilters({...filters, search: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>

                    {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                      </label>
                      <select
                        value={filters.category}
                        onChange={(e) => setFilters({...filters, category: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                        {categories.map((category) => (
                          <option key={category.value} value={category.value}>
                            {category.icon} {category.label}
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* –ì–æ—Ä–æ–¥ */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –°—Ç—Ä–∞–Ω–∞/–ì–æ—Ä–æ–¥
                      </label>
                      <input
                        type="text"
                        placeholder="–°—Ç—Ä–∞–Ω–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥..."
                        value={filters.city}
                        onChange={(e) => setFilters({...filters, city: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>

                    {/* –¶–µ–Ω–∞ */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å (–≤ —Ç–µ–∫—É—â–µ–π –≤–∞–ª—é—Ç–µ)
                      </label>
                      <div className="grid grid-cols-2 gap-2">
                        <input
                          type="number"
                          placeholder="–û—Ç"
                          value={filters.minPrice}
                          onChange={(e) => setFilters({...filters, minPrice: e.target.value})}
                          className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                        <input
                          type="number"
                          placeholder="–î–æ"
                          value={filters.maxPrice}
                          onChange={(e) => setFilters({...filters, maxPrice: e.target.value})}
                          className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                      <p className="text-xs text-gray-500 mt-1">
                        –¶–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
                      </p>
                    </div>

                    {/* –†–µ–π—Ç–∏–Ω–≥ */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                      </label>
                      <select
                        value={filters.minRating}
                        onChange={(e) => setFilters({...filters, minRating: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥</option>
                        <option value="4.5">4.5+ –∑–≤–µ–∑–¥</option>
                        <option value="4.0">4.0+ –∑–≤–µ–∑–¥</option>
                        <option value="3.5">3.5+ –∑–≤–µ–∑–¥</option>
                        <option value="3.0">3.0+ –∑–≤–µ–∑–¥</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>

              {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
              <div className="lg:w-3/4">
                {loading ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="text-center">
                      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                      <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–µ–ª–µ–π...</p>
                    </div>
                  </div>
                ) : hotels.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="text-6xl mb-4">üè®</div>
                    <h3 className="text-xl font-bold text-gray-900 mb-2">–û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p className="text-gray-600 mb-6">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
                    <button
                      onClick={resetFilters}
                      className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                    </button>
                  </div>
                ) : (
                  <motion.div
                    initial="hidden"
                    animate="visible"
                    variants={containerVariants}
                    className={
                      viewMode === 'grid'
                        ? 'grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-6'
                        : 'space-y-4'
                    }
                  >
                    {hotels.map((hotel) => (
                      <motion.div
                        key={hotel.id}
                        variants={itemVariants}
                      >
                        <HotelCard
                          hotel={hotel}
                          onClick={() => window.location.href = `/hotel/${hotel.id}`}
                        />
                      </motion.div>
                    ))}
                  </motion.div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
} 