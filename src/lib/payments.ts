import { useState, useCallback } from 'react';

export interface PaymentCard {
  id: string;
  type: 'visa' | 'mastercard' | 'mir' | 'amex';
  cardNumber: string; // –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
  cardHolder: string;
  expiryDate: string;
  isDefault: boolean;
  created_at: string;
  updated_at: string;
}

export interface AddCardData {
  cardNumber: string;
  cardHolder: string;
  expiryDate: string;
  cvv: string;
  isDefault?: boolean;
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userCards: Map<string, PaymentCard[]> = new Map();

// –î–µ–º–æ-–∫–∞—Ä—Ç—ã –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const demoCards: PaymentCard[] = [
  {
    id: 'card_demo1',
    type: 'visa',
    cardNumber: '**** **** **** 1234',
    cardHolder: 'DEMO USER',
    expiryDate: '12/25',
    isDefault: true,
    created_at: '2024-01-01T00:00:00.000Z',
    updated_at: new Date().toISOString()
  },
  {
    id: 'card_demo2',
    type: 'mastercard',
    cardNumber: '**** **** **** 5678',
    cardHolder: 'DEMO USER',
    expiryDate: '06/26',
    isDefault: false,
    created_at: '2024-01-15T00:00:00.000Z',
    updated_at: new Date().toISOString()
  }
];
userCards.set('demo123', demoCards);

export class PaymentService {
  // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static getUserCards(userId: string): PaymentCard[] {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem(`cards_${userId}`);
      if (stored) {
        try {
          return JSON.parse(stored);
        } catch {
          localStorage.removeItem(`cards_${userId}`);
        }
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    return userCards.get(userId) || [];
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
  static async addCard(
    userId: string, 
    cardData: AddCardData
  ): Promise<{ success: boolean; card?: PaymentCard; error?: string }> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
      const validation = this.validateCardData(cardData);
      if (!validation.valid) {
        return { success: false, error: validation.error };
      }

      const cardId = `card_${Math.random().toString(36).substr(2, 9)}`;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ä—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É
      const cardType = this.detectCardType(cardData.cardNumber);
      
      // –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
      const maskedNumber = this.maskCardNumber(cardData.cardNumber);

      const card: PaymentCard = {
        id: cardId,
        type: cardType,
        cardNumber: maskedNumber,
        cardHolder: cardData.cardHolder.toUpperCase(),
        expiryDate: cardData.expiryDate,
        isDefault: cardData.isDefault || false,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const existingCards = this.getUserCards(userId);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ—ë –æ—Å–Ω–æ–≤–Ω–æ–π
      if (existingCards.length === 0 || card.isDefault) {
        // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ default —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç
        existingCards.forEach(c => c.isDefault = false);
        card.isDefault = true;
      }

      const updatedCards = [...existingCards, card];
      userCards.set(userId, updatedCards);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      if (typeof window !== 'undefined') {
        localStorage.setItem(`cards_${userId}`, JSON.stringify(updatedCards));
      }

      return { success: true, card };
    } catch (error) {
      return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã' };
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É
  static async removeCard(
    userId: string, 
    cardId: string
  ): Promise<{ success: boolean; error?: string }> {
    try {
      const existingCards = this.getUserCards(userId);
      const cardIndex = existingCards.findIndex(c => c.id === cardId);
      
      if (cardIndex === -1) {
        return { success: false, error: '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }

      const cardToRemove = existingCards[cardIndex];
      const updatedCards = existingCards.filter(c => c.id !== cardId);

      // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ä—Ç—É –∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç—ã, –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –æ—Å–Ω–æ–≤–Ω–æ–π
      if (cardToRemove.isDefault && updatedCards.length > 0) {
        updatedCards[0].isDefault = true;
      }

      userCards.set(userId, updatedCards);

      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
      if (typeof window !== 'undefined') {
        localStorage.setItem(`cards_${userId}`, JSON.stringify(updatedCards));
      }

      return { success: true };
    } catch (error) {
      return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã' };
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
  static async setDefaultCard(
    userId: string, 
    cardId: string
  ): Promise<{ success: boolean; error?: string }> {
    try {
      const existingCards = this.getUserCards(userId);
      const updatedCards = existingCards.map(card => ({
        ...card,
        isDefault: card.id === cardId,
        updated_at: card.id === cardId ? new Date().toISOString() : card.updated_at
      }));

      userCards.set(userId, updatedCards);

      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
      if (typeof window !== 'undefined') {
        localStorage.setItem(`cards_${userId}`, JSON.stringify(updatedCards));
      }

      return { success: true };
    } catch (error) {
      return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã' };
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
  static validateCardData(cardData: AddCardData): { valid: boolean; error?: string } {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    const cardNumber = cardData.cardNumber.replace(/\s/g, '');
    if (!/^\d{16}$/.test(cardNumber)) {
      return { valid: false, error: '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª—è
    if (!cardData.cardHolder.trim()) {
      return { valid: false, error: '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    const expiryRegex = /^(0[1-9]|1[0-2])\/\d{2}$/;
    if (!expiryRegex.test(cardData.expiryDate)) {
      return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (MM/YY)' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CVV
    if (!/^\d{3,4}$/.test(cardData.cvv)) {
      return { valid: false, error: 'CVV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-4 —Ü–∏—Ñ—Ä—ã' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    const [month, year] = cardData.expiryDate.split('/');
    const expiryDate = new Date(2000 + parseInt(year), parseInt(month) - 1);
    const now = new Date();
    
    if (expiryDate < now) {
      return { valid: false, error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–µ–∫' };
    }

    return { valid: true };
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É
  static detectCardType(cardNumber: string): PaymentCard['type'] {
    const number = cardNumber.replace(/\s/g, '');
    
    if (number.startsWith('4')) return 'visa';
    if (number.startsWith('5') || number.startsWith('2')) return 'mastercard';
    if (number.startsWith('3')) return 'amex';
    if (number.startsWith('2200') || number.startsWith('2204')) return 'mir';
    
    return 'visa'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  // –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  static maskCardNumber(cardNumber: string): string {
    const number = cardNumber.replace(/\s/g, '');
    return `**** **** **** ${number.slice(-4)}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–∞—Ä—Ç—ã
  static getCardIcon(type: PaymentCard['type']): string {
    const icons = {
      visa: 'üí≥',
      mastercard: 'üí≥', 
      mir: 'üí≥',
      amex: 'üí≥'
    };
    return icons[type] || 'üí≥';
  }
}

// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏
export function usePayments() {
  const [cards, setCards] = useState<PaymentCard[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const loadUserCards = useCallback((userId: string) => {
    setIsLoading(true);
    try {
      const userCards = PaymentService.getUserCards(userId);
      setCards(userCards);
    } catch (error) {
      console.error('Error loading cards:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  const addCard = useCallback(async (userId: string, cardData: AddCardData) => {
    setIsLoading(true);
    try {
      const result = await PaymentService.addCard(userId, cardData);
      if (result.success) {
        loadUserCards(userId);
      }
      return result;
    } finally {
      setIsLoading(false);
    }
  }, [loadUserCards]);

  const removeCard = useCallback(async (userId: string, cardId: string) => {
    setIsLoading(true);
    try {
      const result = await PaymentService.removeCard(userId, cardId);
      if (result.success) {
        loadUserCards(userId);
      }
      return result;
    } finally {
      setIsLoading(false);
    }
  }, [loadUserCards]);

  const setDefaultCard = useCallback(async (userId: string, cardId: string) => {
    setIsLoading(true);
    try {
      const result = await PaymentService.setDefaultCard(userId, cardId);
      if (result.success) {
        loadUserCards(userId);
      }
      return result;
    } finally {
      setIsLoading(false);
    }
  }, [loadUserCards]);

  return {
    cards,
    isLoading,
    loadUserCards,
    addCard,
    removeCard,
    setDefaultCard
  };
} 