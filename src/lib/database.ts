import sqlite3 from 'sqlite3';
import path from 'path';

// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–µ–ª—è
export interface Hotel {
  id: number;
  name: string;
  category: string;
  city: string;
  address: string;
  price_per_night: number;
  rating: number;
  image_url: string;
  description: string;
  amenities: string;
  created_at: string;
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–µ–ª–µ–π
export const HOTEL_CATEGORIES = {
  LUXURY: 'luxury',
  BUSINESS: 'business',
  BUDGET: 'budget',
  RESORT: 'resort',
  BOUTIQUE: 'boutique'
} as const;

class DatabaseManager {
  private db: sqlite3.Database | null = null;
  private dbPath = path.join(process.cwd(), 'hotels.db');

  constructor() {
    this.initDatabase();
  }

  private initDatabase() {
    this.db = new sqlite3.Database(this.dbPath, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
      } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
        this.createTables();
        this.seedData();
      }
    });
  }

  private createTables() {
    if (!this.db) return;

    const createHotelsTable = `
      CREATE TABLE IF NOT EXISTS hotels (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        category TEXT NOT NULL,
        city TEXT NOT NULL,
        address TEXT NOT NULL,
        price_per_night REAL NOT NULL,
        rating REAL NOT NULL,
        image_url TEXT,
        description TEXT,
        amenities TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `;

    this.db.exec(createHotelsTable, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–µ–ª–µ–π:', err.message);
      } else {
        console.log('–¢–∞–±–ª–∏—Ü–∞ –æ—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.');
      }
    });
  }

  private seedData() {
    if (!this.db) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    this.db.get("SELECT COUNT(*) as count FROM hotels", (err, row: any) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err.message);
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ç–µ–ª–∏ –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞
      if (row.count === 0) {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ç–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        this.insertRussianHotelsData();
      } else {
        console.log(`–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å ${row.count} –æ—Ç–µ–ª–µ–π`);
      }
    });
  }

  private insertRussianHotelsData() {
    if (!this.db) return;

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ç–µ–ª–∏
    import('./russianHotels').then(({ allRussianHotelsData }) => {
      const insertStmt = this.db!.prepare(`
        INSERT INTO hotels (name, category, city, address, price_per_night, rating, image_url, description, amenities)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `);

      allRussianHotelsData.forEach((hotel) => {
        insertStmt.run([
          hotel.name,
          hotel.category,
          hotel.city,
          hotel.address,
          hotel.price_per_night,
          hotel.rating,
          hotel.image_url,
          hotel.description,
          hotel.amenities
        ]);
      });

      insertStmt.finalize((err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err.message);
        } else {
          console.log(`üéâ –†–û–°–°–ò–ô–°–ö–ê–Ø –±–∞–∑–∞ –æ—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ ${allRussianHotelsData.length} –æ—Ç–µ–ª–µ–π:`);
          console.log('üèôÔ∏è –ü–æ –≥–æ—Ä–æ–¥–∞–º:');
          console.log('  üèõÔ∏è –ú–æ—Å–∫–≤–∞: –æ—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
          console.log('  üè∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ—Ç–µ–ª–∏');
          console.log('  üèñÔ∏è –°–æ—á–∏: –∫—É—Ä–æ—Ä—Ç–Ω—ã–µ –æ—Ç–µ–ª–∏');
          console.log('  üïå –ö–∞–∑–∞–Ω—å: —Ç–∞—Ç–∞—Ä—Å–∫–∏–µ –æ—Ç–µ–ª–∏');
          console.log('  üè¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ + –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞');
          console.log('‚≠ê –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –õ—é–∫—Å, –ë–∏–∑–Ω–µ—Å, –ë—é–¥–∂–µ—Ç, –ö—É—Ä–æ—Ä—Ç, –ë—É—Ç–∏–∫');
          console.log('üí∞ –¶–µ–Ω—ã: –æ—Ç 3,000‚ÇΩ –¥–æ 45,000‚ÇΩ –∑–∞ –Ω–æ—á—å');
          console.log(`üè® –í—Å–µ–≥–æ –æ—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${allRussianHotelsData.length}`);
        }
      });
    }).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –æ—Ç–µ–ª–µ–π:', error);
    });
  }

  // –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π
  async searchHotels(query: string, category?: string, city?: string): Promise<Hotel[]> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'));
        return;
      }

      let sql = 'SELECT * FROM hotels WHERE 1=1';
      const params: any[] = [];

      if (query) {
        sql += ' AND (name LIKE ? OR description LIKE ? OR city LIKE ?)';
        params.push(`%${query}%`, `%${query}%`, `%${query}%`);
      }

      if (category) {
        sql += ' AND category = ?';
        params.push(category);
      }

      if (city) {
        sql += ' AND city LIKE ?';
        params.push(`%${city}%`);
      }

      sql += ' ORDER BY rating DESC';

      this.db.all(sql, params, (err, rows: Hotel[]) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–µ–ª—å –ø–æ ID
  async getHotelById(id: number): Promise<Hotel | null> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'));
        return;
      }

      this.db.get('SELECT * FROM hotels WHERE id = ?', [id], (err, row: Hotel) => {
        if (err) {
          reject(err);
        } else {
          resolve(row || null);
        }
      });
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async getHotelsByCategory(category: string): Promise<Hotel[]> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'));
        return;
      }

      this.db.all(
        'SELECT * FROM hotels WHERE category = ? ORDER BY rating DESC',
        [category],
        (err, rows: Hotel[]) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        }
      );
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–µ–ª–∏
  async getAllHotels(): Promise<Hotel[]> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'));
        return;
      }

      this.db.all('SELECT * FROM hotels ORDER BY rating DESC', (err, rows: Hotel[]) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });
  }

  // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  close() {
    if (this.db) {
      this.db.close((err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
        } else {
          console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.');
        }
      });
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const dbManager = new DatabaseManager();
export default dbManager; 